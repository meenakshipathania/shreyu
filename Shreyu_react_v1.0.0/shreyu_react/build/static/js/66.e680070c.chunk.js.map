{"version":3,"sources":["components/PageTitle.tsx","components/VerticalForm.tsx","components/FormInput.tsx","pages/forms/Validation.tsx"],"names":["PageTitle","props","className","title","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","VerticalForm","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","child","name","React","createElement","type","key","TextualInput","placeholder","comp","rows","refCallback","otherProps","Form","Control","as","id","ref","r","isInvalid","Feedback","CheckInput","Check","SelectInput","Select","FormInputGroup","startIcon","textClassName","InputGroup","Text","FormInput","labelClassName","containerClass","action","Group","Label","NormalFormValidation","useState","validated","setValidated","Body","event","currentTarget","checkValidity","preventDefault","stopPropagation","controlId","required","defaultValue","hasValidation","aria-describedby","feedback","FormValidationWithTooltip","tooltip","BasicForm","schemaResolver","yupResolver","yup","shape","username","email","password","confirmpassword","oneOf","checkbox","variant","HorizontalForm","schemaResolver2","email2","password2","confirmPassword2","webSite","horizontalCheck","Row","column","md","span","offset","sm","FormValidation","Fragment","lg"],"mappings":"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","file":"static/js/66.e680070c.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ninterface BreadcrumbItems {\n    label: string;\n    path: string;\n    active?: boolean;\n}\n\ninterface PageTitleProps {\n    breadCrumbItems: Array<BreadcrumbItems>;\n    title: string;\n}\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Shreyu</Breadcrumb.Item>\n\n                            {(props.breadCrumbItems || []).map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler } from 'react-hook-form';\n\ninterface VerticalFromProps<TFormValues> {\n    defaultValues?: any;\n    resolver?: Resolver<TFormValues>;\n    children?: any;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n}\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import React, { InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    startIcon?: any;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: any;\n    rows?: string | number;\n}\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Control\n                type={type}\n                placeholder={placeholder}\n                name={name}\n                as={comp}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                rows={rows}\n                {...otherProps}></Form.Control>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// extend textual form-controls with add-ons\nconst FormInputGroup = ({\n    startIcon,\n    type,\n    name,\n    placeholder,\n    comp,\n    register,\n    errors,\n    rows,\n    className,\n    textClassName,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <InputGroup>\n            <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\n            {type === 'select' ? (\n                <SelectInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            ) : (\n                <TextualInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            )}\n        </InputGroup>\n    );\n};\n\nconst FormInput = ({\n    startIcon,\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    textClassName,\n    refCallback,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'checkbox' || type === 'radio' ? (\n                        <Form.Group className={containerClass}>\n                            <CheckInput\n                                type={type}\n                                label={label}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                rows={rows}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <SelectInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    ) : (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <TextualInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Row, Col, Card, Button, InputGroup, Form } from 'react-bootstrap';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { FormInput, VerticalForm } from '../../components';\n\ninterface UserData {\n    username: string;\n    email: string;\n    password: string;\n    confirmpassword: string;\n    checkbox: boolean;\n}\n\ninterface UserData2 {\n    webSite: string;\n    email2: string;\n    password2: string;\n    confirmpassword2: string;\n    horizontalCheck: boolean;\n}\n\nconst NormalFormValidation = () => {\n    const [validated, setValidated] = useState<boolean>(false);\n\n    /*\n     * handle form submission\n     */\n    const handleSubmit = (event: any) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        setValidated(true);\n    };\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Bootstrap Validation - Normal</h4>\n                    <p className=\"sub-header\">\n                        Provide valuable, actionable feedback to your users with HTML5 form validation–available in all\n                        our supported browsers.\n                    </p>\n\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"First name\" defaultValue=\"Mark\" />\n                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom02\">\n                            <Form.Label>Last name</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Last name\" defaultValue=\"Otto\" />\n                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustomUsername\">\n                            <Form.Label>Username</Form.Label>\n                            <InputGroup hasValidation>\n                                <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Username\"\n                                    aria-describedby=\"inputGroupPrepend\"\n                                    required\n                                />\n                                <Form.Control.Feedback type=\"invalid\">Please choose a username.</Form.Control.Feedback>\n                            </InputGroup>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom03\">\n                            <Form.Label>City</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"City\" required />\n                            <Form.Control.Feedback type=\"invalid\">Please provide a valid city.</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom04\">\n                            <Form.Label>State</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"State\" required />\n                            <Form.Control.Feedback type=\"invalid\">Please provide a valid state.</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom05\">\n                            <Form.Label>Zip</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Zip\" required />\n                            <Form.Control.Feedback type=\"invalid\">Please provide a valid zip.</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Check\n                                id=\"validation-check\"\n                                required\n                                label=\"Agree to terms and conditions\"\n                                feedback=\"You must agree before submitting.\"\n                            />\n                        </Form.Group>\n                        <Button type=\"submit\">Submit form</Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst FormValidationWithTooltip = () => {\n    const [validated, setValidated] = useState<boolean>(false);\n\n    /*\n     * handle form submission\n     */\n    const handleSubmit = (event: any) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        setValidated(true);\n    };\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Bootstrap Validation (Tooltips)</h4>\n                    <p className=\"sub-header\">\n                        If your form layout allows it, you can swap the <code>.valid | invalid-feedback</code> classes\n                        for <code>.valid | invalid-tooltip</code> classes to display validation feedback in a styled\n                        tooltip.\n                    </p>\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip01\">\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"First name\" defaultValue=\"Mark\" />\n                            <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip02\">\n                            <Form.Label>Last name</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Last name\" defaultValue=\"Otto\" />\n                            <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationCustonTooltipme\">\n                            <Form.Label>Username</Form.Label>\n                            <InputGroup hasValidation>\n                                <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Username\"\n                                    aria-describedby=\"inputGroupPrepend\"\n                                    required\n                                />\n                                <Form.Control.Feedback type=\"invalid\" tooltip>\n                                    Please choose a username.\n                                </Form.Control.Feedback>\n                            </InputGroup>\n                        </Form.Group>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip03\">\n                            <Form.Label>City</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"City\" required />\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\n                                Please provide a valid city.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip04\">\n                            <Form.Label>State</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"State\" required />\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\n                                Please provide a valid state.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip05\">\n                            <Form.Label>Zip</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Zip\" required />\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\n                                Please provide a valid zip.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Button type=\"submit\">Submit form</Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst BasicForm = () => {\n    /*\n    form validation schema\n    */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            username: yup.string().required('Please enter Username'),\n            email: yup.string().required('Please enter Email address'),\n            password: yup.string().required('Please enter Password'),\n            confirmpassword: yup\n                .string()\n                .oneOf([yup.ref('password'), null], \"Passwords don't match\")\n                .required('This value is required.'),\n            checkbox: yup.bool().oneOf([true]),\n        })\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Basic Form</h4>\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\n                <VerticalForm<UserData>\n                    onSubmit={() => {}}\n                    resolver={schemaResolver}\n                    defaultValues={{ username: 'test' }}>\n                    <FormInput\n                        label={'Username'}\n                        type=\"text\"\n                        name=\"username\"\n                        placeholder=\"Enter your name\"\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={'Email address'}\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Enter email\"\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={'Password'}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={'Confirm Password'}\n                        type=\"password\"\n                        name=\"confirmpassword\"\n                        placeholder=\"Password\"\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput label={'Remember me'} type=\"checkbox\" name=\"checkbox\" containerClass={'mb-3'} />\n\n                    <div className=\"text-md-end mb-0\">\n                        <Button variant=\"primary\" className=\"me-1\" type=\"submit\">\n                            Submit\n                        </Button>\n                        <Button variant=\"secondary\" type=\"reset\">\n                            Cancel\n                        </Button>\n                    </div>\n                </VerticalForm>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalForm = () => {\n    /*\n    form validation schema\n    */\n    const schemaResolver2 = yupResolver(\n        yup.object().shape({\n            email2: yup.string().required('Please enter Email address'),\n            password2: yup.string().required('Please enter Password'),\n            confirmPassword2: yup\n                .string()\n                .oneOf([yup.ref('password'), null], \"Passwords don't match\")\n                .required('This value is required.'),\n            webSite: yup.string().required('Please enter URL'),\n            horizontalCheck: yup.bool().oneOf([true]),\n        })\n    );\n\n    const methods = useForm<UserData2>({\n        defaultValues: { email2: 'shreyu@coderthemes.com' },\n        resolver: schemaResolver2,\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Horizontal Form</h4>\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\n                <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(() => {})}>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label column md={4}>\n                            Email<span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"email\"\n                                name=\"email2\"\n                                placeholder=\"Email\"\n                                register={register}\n                                key=\"email2\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label column md={4}>\n                            Password<span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"password\"\n                                name=\"password2\"\n                                placeholder=\"Password\"\n                                register={register}\n                                key=\"password2\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label column md={4}>\n                            Confirm Password<span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"password\"\n                                name=\"confirmPassword2\"\n                                placeholder=\"Password\"\n                                register={register}\n                                key=\"confirmPassword2\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label column md={4}>\n                            Web Site<span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"url\"\n                                name=\"webSite\"\n                                placeholder=\"URL\"\n                                register={register}\n                                key=\"webSite\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"horizontalCheck\">\n                        <Col md={{ span: 8, offset: 4 }}>\n                            <FormInput\n                                label={'Remember me'}\n                                type=\"checkbox\"\n                                name=\"horizontalCheck\"\n                                register={register}\n                                key=\"horizontalCheck\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Col sm={{ span: 8, offset: 4 }}>\n                            <Button variant=\"primary\" className=\"me-1\" type=\"submit\">\n                                Submit\n                            </Button>\n                            <Button variant=\"secondary\" type=\"reset\">\n                                Cancel\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormValidation = () => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/forms/validation' },\n                    { label: 'Validation', path: '/forms/validation', active: true },\n                ]}\n                title={'Validation'}\n            />\n\n            <Row>\n                <Col lg={6}>\n                    <NormalFormValidation />\n                </Col>\n\n                <Col lg={6}>\n                    <FormValidationWithTooltip />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <BasicForm />\n                </Col>\n                <Col lg={6}>\n                    <HorizontalForm />\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default FormValidation;\n"],"sourceRoot":""}