{"version":3,"sources":["components/PageTitle.tsx","components/FileUploader.tsx","pages/forms/FileUpload.tsx"],"names":["PageTitle","props","className","title","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","FileUploader","useState","selectedFiles","setSelectedFiles","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","removeFile","e","fileIndex","newFiles","splice","onFileUpload","onDrop","acceptedFiles","files","allFiles","showPreview","file","Object","assign","preview","split","URL","createObjectURL","formattedSize","size","push","handleAcceptedFiles","getRootProps","getInputProps","classNames","length","f","Fragment","onClick","stopPropagation","data-dz-thumbnail","alt","name","src","data-dz-size","data-dz-name","Button","variant","defaultProps","FileUpload","Row","Col","xs","Card","Body","console"],"mappings":"6HAAA,2CA8CeA,IA7BG,SAACC,GACf,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,sBAAKC,UAAU,iBAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BD,EAAME,QAClC,qBAAKD,UAAU,mBAAf,SACI,eAAC,IAAD,CAAYE,UAAW,CAAEF,UAAW,OAApC,UACI,cAAC,IAAWG,KAAZ,CAAiBC,KAAK,IAAtB,qBAEEL,EAAMM,iBAAmB,IAAIC,KAAI,SAACC,EAAMC,GACtC,OAAOD,EAAKE,OACR,cAAC,IAAWN,KAAZ,CAAiBM,QAAM,EAAvB,SACKF,EAAKG,OADmBF,GAI7B,cAAC,IAAWL,KAAZ,CAA6BC,KAAMG,EAAKI,KAAxC,SACKJ,EAAKG,OADYF,oB,iKClBpDI,EAAe,SAACb,GAA8B,IAAD,EACLc,mBAAqB,IADhB,mBACxCC,EADwC,KACzBC,EADyB,KA2BzCC,EAAc,SAACC,GAAyC,IAA1BC,EAAyB,uDAAN,EACnD,GAAc,IAAVD,EAAa,MAAO,UACxB,IAAME,EAAI,KACJC,EAAKF,EAAW,EAAI,EAAIA,EACxBG,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAE5DC,EAAIC,KAAKC,MAAMD,KAAKE,IAAIR,GAASM,KAAKE,IAAIN,IAChD,OAAOO,YAAYT,EAAQM,KAAKI,IAAIR,EAAGG,IAAIM,QAAQR,IAAO,IAAMC,EAAMC,IAMpEO,EAAa,SAACC,EAAQC,GACxB,IAAMC,EAAQ,YAAOlB,GACrBkB,EAASC,OAAOF,EAAW,GAC3BhB,EAAiBiB,GACbjC,EAAMmC,cAAcnC,EAAMmC,aAAaF,IAG/C,OACI,mCACI,cAAC,IAAD,2BAAcjC,GAAd,IAAqBoC,OAAQ,SAACC,GAAD,OA3CT,SAACC,GACzB,IAEuB,EAFnBC,EAAWD,EAEXtC,EAAMwC,eACLF,GAAS,IAAI/B,KAAI,SAACkC,GAAD,OACdC,OAAOC,OAAOF,EAAM,CAChBG,QAAwC,UAA/BH,EAAI,KAASI,MAAM,KAAK,GAAiBC,IAAIC,gBAAgBN,GAAQ,KAC9EO,cAAe/B,EAAYwB,EAAKQ,YAIxC,EADAV,EAAQ,YAAOxB,IACNmC,KAAT,oBAAiBZ,IACjBtB,EAAiBuB,IAGjBvC,EAAMmC,cAAcnC,EAAMmC,aAAaI,GA4BSY,CAAoBd,IAApE,SACK,gBAAGe,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAjB,OACG,qBACIpD,UAAWqD,IAAW,WAAY,eAAgB,CAC9C,aAAcvC,GAAiBA,EAAcwC,OAAS,IAF9D,SAII,gDAASH,KAAT,cACI,sBAAKnD,UAAU,wBAAf,UACI,qCAAWoD,MACX,mBAAGpD,UAAU,mCACb,qEACA,uBAAMA,UAAU,cAAhB,+DACsD,yCADtD,6BAKHD,EAAMwC,cACFzB,GAAiB,IAAIR,KAAI,SAACiD,EAAGjC,GAC1B,OACI,eAAC,IAAMkC,SAAP,WACKD,EAAEZ,SACC,sBACIc,QAAS,SAAC3B,GAAD,OAAOA,EAAE4B,mBAClB1D,UAAU,iEAFd,UAGI,qBAAKA,UAAU,WAAf,SACI,qBAEI2D,oBAAkB,GAClBC,IAAKL,EAAEM,KACPC,IAAKP,EAAEZ,SAHFrB,KAOb,sBAAKtB,UAAU,aAAf,UACI,qBAAKA,UAAU,UAAf,SACI,uBAAM+D,eAAa,GAAnB,UACI,iCAASR,EAAER,gBADf,WAIJ,qBAAK/C,UAAU,cAAf,SACI,sBAAMgE,eAAa,GAAnB,SAAuBT,EAAEM,YAIjC,qBAAK7D,UAAU,YAAf,SACI,cAACiE,EAAA,EAAD,CAAQC,QAAQ,GAAGT,QAAS,SAAC3B,GAAD,OAAOD,EAAWC,EAAGR,IAAjD,SACI,mBAAGtB,UAAU,6BAK3BuD,EAAEZ,SACA,sBACIc,QAAS,SAAC3B,GAAD,OAAOA,EAAE4B,mBAClB1D,UAAU,gEAFd,UAGI,qBAAKA,UAAU,WAAf,SACI,qBAAK2D,oBAAkB,GAAGC,IAAI,OAElC,sBAAK5D,UAAU,aAAf,UACI,qBAAKA,UAAU,UAAf,SACI,uBAAM+D,eAAa,GAAnB,UACI,iCAASR,EAAER,gBADf,WAIJ,qBAAK/C,UAAU,cAAf,SACI,sBAAMgE,eAAa,GAAnB,SAAuBT,EAAEM,YAIjC,qBAAK7D,UAAU,YAAf,SACI,cAACiE,EAAA,EAAD,CAAQC,QAAQ,GAAGT,QAAS,SAAC3B,GAAD,OAAOD,EAAWC,EAAGR,IAAjD,SACI,mBAAGtB,UAAU,8BApDZsB,mBAoE7DV,EAAauD,aAAe,CACxB5B,aAAa,GAGF3B,QC5GAwD,UAxCI,WACf,OACI,eAAC,IAAMZ,SAAP,WACI,cAAC1D,EAAA,EAAD,CACIO,gBAAiB,CACb,CAAEK,MAAO,QAASC,KAAM,iBACxB,CAAED,MAAO,cAAeC,KAAM,gBAAiBF,QAAQ,IAE3DR,MAAO,gBAGX,cAACoE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,SACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIzE,UAAU,yBAAd,kCACA,mBAAGA,UAAU,aAAb,wHAKA,cAAC,EAAD,CACIkC,aAAc,SAACG,GACXqC,QAAQjD,IAAI,oBAAqBY,MAIzC,qBAAKrC,UAAU,yBAAf,SACI,eAACiE,EAAA,EAAD,CAAQC,QAAQ,SAAhB,UACI,mBAAGlE,UAAU,6BADjB","file":"static/js/73.16f46184.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ninterface BreadcrumbItems {\n    label: string;\n    path: string;\n    active?: boolean;\n}\n\ninterface PageTitleProps {\n    breadCrumbItems: Array<BreadcrumbItems>;\n    title: string;\n}\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Shreyu</Breadcrumb.Item>\n\n                            {(props.breadCrumbItems || []).map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport Dropzone from 'react-dropzone';\nimport classNames from 'classnames';\n\ninterface FileType extends File {\n    preview?: string;\n    formattedSize?: string;\n}\n\ninterface FileUploaderProps {\n    onFileUpload?: (files: FileType[]) => void;\n    showPreview?: boolean;\n}\n\nconst FileUploader = (props: FileUploaderProps) => {\n    const [selectedFiles, setSelectedFiles] = useState<FileType[]>([]);\n\n    /**\n     * Handled the accepted files and shows the preview\n     */\n    const handleAcceptedFiles = (files: FileType[]) => {\n        var allFiles = files;\n\n        if (props.showPreview) {\n            (files || []).map((file) =>\n                Object.assign(file, {\n                    preview: file['type'].split('/')[0] === 'image' ? URL.createObjectURL(file) : null,\n                    formattedSize: formatBytes(file.size),\n                })\n            );\n            allFiles = [...selectedFiles];\n            allFiles.push(...files);\n            setSelectedFiles(allFiles);\n        }\n\n        if (props.onFileUpload) props.onFileUpload(allFiles);\n    };\n\n    /**\n     * Formats the size\n     */\n    const formatBytes = (bytes: number, decimals: number = 2) => {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    };\n\n    /*\n     * Removes the selected file\n     */\n    const removeFile = (e: any, fileIndex: number) => {\n        const newFiles = [...selectedFiles];\n        newFiles.splice(fileIndex, 1);\n        setSelectedFiles(newFiles);\n        if (props.onFileUpload) props.onFileUpload(newFiles);\n    };\n\n    return (\n        <>\n            <Dropzone {...props} onDrop={(acceptedFiles) => handleAcceptedFiles(acceptedFiles)}>\n                {({ getRootProps, getInputProps }) => (\n                    <div\n                        className={classNames('dropzone', 'dz-clickable', {\n                            'dz-started': selectedFiles && selectedFiles.length > 0,\n                        })}>\n                        <div {...getRootProps()}>\n                            <div className=\"dz-message needsclick\">\n                                <input {...getInputProps()} />\n                                <i className=\"h1 text-muted uil-cloud-upload\"></i>\n                                <h3>Drop files here or click to upload.</h3>\n                                <span className=\"text-muted \">\n                                    (This is just a demo dropzone. Selected files are <strong>not</strong> actually\n                                    uploaded.)\n                                </span>\n                            </div>\n                            {props.showPreview &&\n                                (selectedFiles || []).map((f, i) => {\n                                    return (\n                                        <React.Fragment key={i}>\n                                            {f.preview && (\n                                                <div\n                                                    onClick={(e) => e.stopPropagation()}\n                                                    className=\"dz-preview dz-processing dz-error dz-complete dz-image-preview\">\n                                                    <div className=\"dz-image\">\n                                                        <img\n                                                            key={i}\n                                                            data-dz-thumbnail=\"\"\n                                                            alt={f.name}\n                                                            src={f.preview}\n                                                        />\n                                                    </div>\n\n                                                    <div className=\"dz-details\">\n                                                        <div className=\"dz-size\">\n                                                            <span data-dz-size=\"\">\n                                                                <strong>{f.formattedSize}</strong> KB\n                                                            </span>\n                                                        </div>\n                                                        <div className=\"dz-filename\">\n                                                            <span data-dz-name=\"\">{f.name}</span>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"dz-remove\">\n                                                        <Button variant=\"\" onClick={(e) => removeFile(e, i)}>\n                                                            <i className=\"uil uil-multiply\"></i>\n                                                        </Button>\n                                                    </div>\n                                                </div>\n                                            )}\n                                            {!f.preview && (\n                                                <div\n                                                    onClick={(e) => e.stopPropagation()}\n                                                    className=\"dz-preview dz-file-preview dz-processing dz-error dz-complete\">\n                                                    <div className=\"dz-image\">\n                                                        <img data-dz-thumbnail=\"\" alt=\"\" />\n                                                    </div>\n                                                    <div className=\"dz-details\">\n                                                        <div className=\"dz-size\">\n                                                            <span data-dz-size=\"\">\n                                                                <strong>{f.formattedSize}</strong> KB\n                                                            </span>\n                                                        </div>\n                                                        <div className=\"dz-filename\">\n                                                            <span data-dz-name=\"\">{f.name}</span>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"dz-remove\">\n                                                        <Button variant=\"\" onClick={(e) => removeFile(e, i)}>\n                                                            <i className=\"uil uil-multiply\"></i>\n                                                        </Button>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </React.Fragment>\n                                    );\n                                })}\n                        </div>\n                    </div>\n                )}\n            </Dropzone>\n        </>\n    );\n};\n\nFileUploader.defaultProps = {\n    showPreview: true,\n};\n\nexport default FileUploader;\n","import React from 'react';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport FileUploader from '../../components/FileUploader';\n\nconst FileUpload = () => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/forms/upload' },\n                    { label: 'File Upload', path: '/forms/upload', active: true },\n                ]}\n                title={'File Upload'}\n            />\n\n            <Row>\n                <Col xs={12}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title mt-0 mb-1\">Dropzone File Upload</h4>\n                            <p className=\"sub-header\">\n                                DropzoneJS is an open source library that provides drag’n’drop file uploads with image\n                                previews.\n                            </p>\n\n                            <FileUploader\n                                onFileUpload={(files) => {\n                                    console.log('Uploaded files - ', files);\n                                }}\n                            />\n\n                            <div className=\"clearfix text-end mt-3\">\n                                <Button variant=\"danger\">\n                                    <i className=\"uil uil-arrow-right me-1\"></i> Submit\n                                </Button>\n                            </div>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default FileUpload;\n"],"sourceRoot":""}