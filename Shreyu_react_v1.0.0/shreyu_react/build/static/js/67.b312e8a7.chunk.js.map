{"version":3,"sources":["components/PageTitle.tsx","components/VerticalForm.tsx","components/FormInput.tsx","pages/forms/Wizard.tsx"],"names":["PageTitle","props","className","title","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","VerticalForm","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","child","name","React","createElement","type","key","TextualInput","placeholder","comp","rows","refCallback","otherProps","Form","Control","as","id","ref","r","isInvalid","Feedback","CheckInput","Check","SelectInput","Select","FormInputGroup","startIcon","textClassName","InputGroup","Text","FormInput","labelClassName","containerClass","action","Group","Label","BasicWizard","Body","render","next","Row","htmlFor","column","md","defaultValue","variant","disabled","onClick","previous","sm","Input","WizardWithProgressbar","step","steps","Fragment","animated","striped","now","indexOf","length","WizardWithFormValidation","validationSchema","yupResolver","yup","shape","email","required","password","checkbox","oneOf","validationSchema2","firstname","lastname","event","values","FormWizard","xl","lg"],"mappings":"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","file":"static/js/67.b312e8a7.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ninterface BreadcrumbItems {\n    label: string;\n    path: string;\n    active?: boolean;\n}\n\ninterface PageTitleProps {\n    breadCrumbItems: Array<BreadcrumbItems>;\n    title: string;\n}\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Shreyu</Breadcrumb.Item>\n\n                            {(props.breadCrumbItems || []).map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler } from 'react-hook-form';\n\ninterface VerticalFromProps<TFormValues> {\n    defaultValues?: any;\n    resolver?: Resolver<TFormValues>;\n    children?: any;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n}\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import React, { InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    startIcon?: any;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: any;\n    rows?: string | number;\n}\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Control\n                type={type}\n                placeholder={placeholder}\n                name={name}\n                as={comp}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                rows={rows}\n                {...otherProps}></Form.Control>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// extend textual form-controls with add-ons\nconst FormInputGroup = ({\n    startIcon,\n    type,\n    name,\n    placeholder,\n    comp,\n    register,\n    errors,\n    rows,\n    className,\n    textClassName,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <InputGroup>\n            <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\n            {type === 'select' ? (\n                <SelectInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            ) : (\n                <TextualInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            )}\n        </InputGroup>\n    );\n};\n\nconst FormInput = ({\n    startIcon,\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    textClassName,\n    refCallback,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'checkbox' || type === 'radio' ? (\n                        <Form.Group className={containerClass}>\n                            <CheckInput\n                                type={type}\n                                label={label}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                rows={rows}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <SelectInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    ) : (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <TextualInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import React from 'react';\nimport { Row, Col, Card, Form, Button, ProgressBar } from 'react-bootstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { VerticalForm, FormInput } from '../../components/';\n\nconst BasicWizard = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\"> Basic Wizard</h4>\n                <Wizard>\n                    <Steps>\n                        <Step\n                            id=\"login\"\n                            render={({ next }) => (\n                                <Form>\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"exampleEmail\" column md={3}>\n                                            Email\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"email\"\n                                                name=\"exampleEmail\"\n                                                id=\"exampleEmail\"\n                                                placeholder=\"Enter email\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"examplePassword\" column md={3}>\n                                            Password\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"password\"\n                                                name=\"examplePassword\"\n                                                id=\"examplePassword\"\n                                                placeholder=\"password placeholder\"\n                                                defaultValue=\"12345\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"examplerePassword\" column md={3}>\n                                            Re-Password\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"password\"\n                                                name=\"exampleRepassword\"\n                                                id=\"examplerePassword\"\n                                                placeholder=\"password\"\n                                                defaultValue=\"12345\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <ul className=\"list-inline wizard mb-0\">\n                                        <li className=\"previous list-inline-item\">\n                                            <Button variant=\"secondary\" disabled>\n                                                Previous\n                                            </Button>\n                                        </li>\n                                        <li className=\"next list-inline-item float-end\">\n                                            <Button onClick={next} variant=\"secondary\">\n                                                Next\n                                            </Button>\n                                        </li>\n                                    </ul>\n                                </Form>\n                            )}\n                        />\n                        <Step\n                            id=\"gandalf\"\n                            render={({ next, previous }) => (\n                                <Form>\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"fname\" column md={3}>\n                                            First Name\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"fname\"\n                                                id=\"fname\"\n                                                placeholder=\"Enter first name\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"lname\" column md={3}>\n                                            Last Name\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"lname\"\n                                                id=\"lname\"\n                                                placeholder=\"enter last name\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"phone\" column md={3}>\n                                            Phone Number\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"phone\"\n                                                id=\"phone\"\n                                                placeholder=\"enter phone number\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <ul className=\"list-inline wizard mb-0\">\n                                        <li className=\"previous list-inline-item\">\n                                            <Button onClick={previous} variant=\"secondary\">\n                                                Previous\n                                            </Button>\n                                        </li>\n                                        <li className=\"next list-inline-item float-end\">\n                                            <Button onClick={next} variant=\"secondary\">\n                                                Next\n                                            </Button>\n                                        </li>\n                                    </ul>\n                                </Form>\n                            )}\n                        />\n                        <Step\n                            id=\"dumbledore\"\n                            render={({ previous }) => (\n                                <Row>\n                                    <Col sm={12}>\n                                        <div className=\"text-center\">\n                                            <h2 className=\"mt-0\">\n                                                <i className=\"mdi mdi-check-all\"></i>\n                                            </h2>\n                                            <h3 className=\"mt-0\">Thank you !</h3>\n\n                                            <p className=\"w-75 mb-2 mx-auto\">\n                                                Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                dignissim eros at volutpat. In egestas mattis dui. Aliquam mattis dictum\n                                                aliquet.\n                                            </p>\n\n                                            <div className=\"mb-3\">\n                                                <Form.Check type=\"checkbox\" id=\"check1\">\n                                                    <Form.Check.Input type=\"checkbox\" />{' '}\n                                                    <Form.Check.Label>\n                                                        I agree with the Terms and Conditions\n                                                    </Form.Check.Label>\n                                                </Form.Check>\n                                            </div>\n                                        </div>\n                                    </Col>\n\n                                    <Col sm={12}>\n                                        <ul className=\"list-inline wizard mb-0\">\n                                            <li className=\"previous list-inline-item\">\n                                                <Button onClick={previous} variant=\"secondary\">\n                                                    Previous\n                                                </Button>\n                                            </li>\n\n                                            <li className=\"next list-inline-item float-end\">\n                                                <Button variant=\"secondary\">Submit</Button>\n                                            </li>\n                                        </ul>\n                                    </Col>\n                                </Row>\n                            )}\n                        />\n                    </Steps>\n                </Wizard>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst WizardWithProgressbar = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\">Wizard with Progress bar</h4>\n\n                <Wizard\n                    render={({ step, steps }) => (\n                        <React.Fragment>\n                            <ProgressBar\n                                animated\n                                striped\n                                variant=\"success\"\n                                now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                                className=\"mb-3 progress-sm\"\n                            />\n\n                            <Steps>\n                                <Step\n                                    id=\"login\"\n                                    render={({ next }) => (\n                                        <Form>\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"exampleEmail\" column md={3}>\n                                                    Email\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"email\"\n                                                        name=\"exampleEmail\"\n                                                        id=\"exampleEmail2\"\n                                                        placeholder=\"Enter email\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"examplePassword\" column md={3}>\n                                                    Password\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"password\"\n                                                        name=\"password\"\n                                                        id=\"examplePassword2\"\n                                                        placeholder=\"password placeholder\"\n                                                        defaultValue=\"12345\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"examplerePassword\" column md={3}>\n                                                    Re-Password\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"password\"\n                                                        name=\"repassword\"\n                                                        id=\"examplerePassword2\"\n                                                        placeholder=\"password\"\n                                                        defaultValue=\"12345\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button variant=\"secondary\" disabled>\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button onClick={next} variant=\"secondary\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </Form>\n                                    )}\n                                />\n                                <Step\n                                    id=\"gandalf\"\n                                    render={({ next, previous }) => (\n                                        <Form>\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"fname\" column md={3}>\n                                                    First Name\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"fname\"\n                                                        id=\"fname\"\n                                                        placeholder=\"Enter first name\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"lname\" column md={3}>\n                                                    Last Name\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"lname\"\n                                                        id=\"lname\"\n                                                        placeholder=\"enter last name\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"phone\" column md={3}>\n                                                    Phone Number\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"phone\"\n                                                        id=\"phone\"\n                                                        placeholder=\"enter phone number\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button onClick={previous} variant=\"secondary\">\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button onClick={next} variant=\"secondary\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </Form>\n                                    )}\n                                />\n                                <Step\n                                    id=\"dumbledore\"\n                                    render={({ previous }) => (\n                                        <Row>\n                                            <Col sm={12}>\n                                                <div className=\"text-center\">\n                                                    <h2 className=\"mt-0\">\n                                                        <i className=\"mdi mdi-check-all\"></i>\n                                                    </h2>\n                                                    <h3 className=\"mt-0\">Thank you !</h3>\n\n                                                    <p className=\"w-75 mb-2 mx-auto\">\n                                                        Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                        dignissim eros at volutpat. In egestas mattis dui. Aliquam\n                                                        mattis dictum aliquet.\n                                                    </p>\n\n                                                    <div className=\"mb-3\">\n                                                        <Form.Check type=\"checkbox\" id=\"check2\">\n                                                            <Form.Check.Input type=\"checkbox\" />{' '}\n                                                            <Form.Check.Label>\n                                                                I agree with the Terms and Conditions\n                                                            </Form.Check.Label>\n                                                        </Form.Check>\n                                                    </div>\n                                                </div>\n                                            </Col>\n\n                                            <Col sm={12}>\n                                                <ul className=\"list-inline wizard mb-0\">\n                                                    <li className=\"previous list-inline-item\">\n                                                        <Button onClick={previous} variant=\"secondary\">\n                                                            Previous\n                                                        </Button>\n                                                    </li>\n\n                                                    <li className=\"next list-inline-item float-end\">\n                                                        <Button variant=\"secondary\">Submit</Button>\n                                                    </li>\n                                                </ul>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                />\n                            </Steps>\n                        </React.Fragment>\n                    )}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst WizardWithFormValidation = () => {\n    /*\n     * form validation schema\n     */\n    const validationSchema = yupResolver(\n        yup.object().shape({\n            email: yup.string().required('Please enter Email address'),\n            password: yup.string().required('Please enter Password'),\n            checkbox: yup.bool().oneOf([true]),\n        })\n    );\n    const validationSchema2 = yupResolver(\n        yup.object().shape({\n            firstname: yup.string().required('Please enter First Name'),\n            lastname: yup.string().required('Please enter Last Name'),\n            checkbox: yup.bool().oneOf([true]),\n        })\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\">Wizard with Validation</h4>\n\n                <Wizard\n                    render={({ step, steps }) => (\n                        <React.Fragment>\n                            <ProgressBar\n                                animated\n                                striped\n                                variant=\"success\"\n                                now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                                className=\"mb-3 progress-sm\"\n                            />\n\n                            <Steps>\n                                <Step\n                                    id=\"login\"\n                                    render={({ next }) => (\n                                        <VerticalForm onSubmit={(event, values) => next()} resolver={validationSchema}>\n                                            <FormInput\n                                                label=\"Username/Email\"\n                                                type=\"email\"\n                                                name=\"email\"\n                                                containerClass={'mb-3'}\n                                            />\n                                            <FormInput\n                                                label=\"Password\"\n                                                type=\"password\"\n                                                name=\"password\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <FormInput\n                                                label=\"Remember me\"\n                                                type=\"checkbox\"\n                                                name=\"checkbox\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button variant=\"secondary\" disabled>\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button variant=\"secondary\" type=\"submit\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </VerticalForm>\n                                    )}\n                                />\n                                <Step\n                                    id=\"gandalf\"\n                                    render={({ next, previous }) => (\n                                        <VerticalForm onSubmit={(event, values) => next()} resolver={validationSchema2}>\n                                            <FormInput\n                                                label=\"First Name\"\n                                                type=\"text\"\n                                                name=\"firstname\"\n                                                containerClass={'mb-3'}\n                                            />\n                                            <FormInput\n                                                label=\"Last Name\"\n                                                type=\"text\"\n                                                name=\"lastname\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <FormInput\n                                                label=\"Agree to terms and conditions\"\n                                                type=\"checkbox\"\n                                                name=\"checkbox\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button onClick={previous} variant=\"secondary\">\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button variant=\"secondary\" type=\"submit\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </VerticalForm>\n                                    )}\n                                />\n                                <Step\n                                    id=\"dumbledore\"\n                                    render={({ previous }) => (\n                                        <Row>\n                                            <Col sm={12}>\n                                                <div className=\"text-center\">\n                                                    <h2 className=\"mt-0\">\n                                                        <i className=\"mdi mdi-check-all\"></i>\n                                                    </h2>\n                                                    <h3 className=\"mt-0\">Thank you !</h3>\n\n                                                    <p className=\"w-75 mb-2 mx-auto\">\n                                                        Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                        dignissim eros at volutpat. In egestas mattis dui. Aliquam\n                                                        mattis dictum aliquet.\n                                                    </p>\n\n                                                    <div className=\"mb-3\">\n                                                        <Form.Check type=\"checkbox\" id=\"check3\">\n                                                            <Form.Check.Input type=\"checkbox\" />{' '}\n                                                            <Form.Check.Label>\n                                                                I agree with the Terms and Conditions\n                                                            </Form.Check.Label>\n                                                        </Form.Check>\n                                                    </div>\n                                                </div>\n                                            </Col>\n\n                                            <Col sm={12}>\n                                                <ul className=\"list-inline wizard mb-0\">\n                                                    <li className=\"previous list-inline-item\">\n                                                        <Button onClick={previous} variant=\"secondary\">\n                                                            Previous\n                                                        </Button>\n                                                    </li>\n\n                                                    <li className=\"next list-inline-item float-end\">\n                                                        <Button variant=\"secondary\">Submit</Button>\n                                                    </li>\n                                                </ul>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                />\n                            </Steps>\n                        </React.Fragment>\n                    )}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormWizard = () => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/ui/forms/wizard' },\n                    { label: 'Form Wizard', path: '/ui/forms/wizard', active: true },\n                ]}\n                title={'Form Wizard'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <BasicWizard />\n                </Col>\n\n                <Col xl={6}>\n                    <WizardWithProgressbar />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <WizardWithFormValidation />\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default FormWizard;\n"],"sourceRoot":""}