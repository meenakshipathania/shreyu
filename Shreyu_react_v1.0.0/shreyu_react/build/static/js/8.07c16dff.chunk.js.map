{"version":3,"sources":["components/Scrollbar.tsx","hooks/useViewPort.ts","components/ThemeCustomizer/LayoutTypes.tsx","components/ThemeCustomizer/LayoutWidth.tsx","components/ThemeCustomizer/MenuPositions.tsx","components/ThemeCustomizer/LeftSideBarTheme.tsx","components/ThemeCustomizer/LeftSideBarType.tsx","components/ThemeCustomizer/SidebarUserInfo.tsx","components/ThemeCustomizer/TopbarTheme.tsx","components/ThemeCustomizer/index.tsx","layouts/RightSidebar.tsx"],"names":["Scrollbar","className","style","children","otherProps","useViewport","useState","window","innerWidth","width","setWidth","innerHeight","height","setHeight","useEffect","handleWindowResize","addEventListener","removeEventListener","LayoutTypes","changeLayoutType","layoutType","layoutConstants","Form","Check","Input","type","onChange","e","target","value","name","LAYOUT_VERTICAL","id","checked","Label","htmlFor","LAYOUT_HORIZONTAL","LAYOUT_DETACHED","LAYOUT_TWO_COLUMN","LayoutWidth","changeWidthMode","layoutWidth","LAYOUT_WIDTH_FLUID","LAYOUT_WIDTH_BOXED","MenuPositions","changeMenuPosition","menuPosition","MENU_POSITION_FIXED","MENU_POSITION_SCROLLABLE","LeftSideBarTheme","changeLeftSidebarTheme","leftSideBarTheme","LEFT_SIDEBAR_THEME_LIGHT","LEFT_SIDEBAR_THEME_DARK","LeftSideBarType","changeLeftSiderbarType","leftSideBarType","LEFT_SIDEBAR_TYPE_DEFAULT","LEFT_SIDEBAR_TYPE_CONDENSED","LEFT_SIDEBAR_TYPE_COMPACT","SidebarUserInfo","toggleLeftSidebarUserInfo","showSidebarUserInfo","TopbarTheme","changeTopBarTheme","topbarTheme","TOPBAR_THEME_DARK","TOPBAR_THEME_LIGHT","ThemeCustomizer","dispatch","useDispatch","useSelector","state","Layout","disableMenuPositions","setDisableMenuPositions","disableSidebarTheme","setDisableSidebarTheme","disableSidebarType","setDisableSidebarType","disableSidebarUser","setDisableSidebarUser","_loadStateFromProps","useCallback","changeLayout","changeLayoutWidth","changeMenuPositions","changeSidebarTheme","changeSidebarType","toggleSidebarUserInfo","changeTopbarTheme","Fragment","role","onClick","RightSideBar","props","rightBarNodeRef","useRef","isOpenRightSideBar","handleOtherClick","current","contains","hideRightSidebar","document","ref","maxHeight","zIndex","timeout","scrollbarMaxSize"],"mappings":"sKAiBeA,IARG,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,UAAWC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,SAAaC,EAAiC,gDACjF,OACI,cAAC,IAAD,yBAAWH,UAAWA,EAAWC,MAAOA,GAAWE,GAAnD,aACKD,O,sFCVPE,EAAc,WAAO,IAAD,EACIC,mBAASC,OAAOC,YADpB,mBACfC,EADe,KACRC,EADQ,OAEMJ,mBAASC,OAAOI,aAFtB,mBAEfC,EAFe,KAEPC,EAFO,KAatB,OATAC,qBAAU,WACN,IAAMC,EAAqB,WACvBL,EAASH,OAAOC,YAChBK,EAAUN,OAAOI,cAIrB,OADAJ,OAAOS,iBAAiB,SAAUD,GAC3B,kBAAMR,OAAOU,oBAAoB,SAAUF,MACnD,IACI,CAAEN,QAAOG,Y,qHCmDLM,EAxDK,SAAC,GAAyE,IAAvEC,EAAsE,EAAtEA,iBAAkBC,EAAoD,EAApDA,WAAYC,EAAwC,EAAxCA,gBACjD,OACI,qCACI,oBAAIpB,UAAU,2BAAd,oBAEA,eAACqB,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLC,SAAU,SAACC,GAAD,OAAOR,EAAiBQ,EAAEC,OAAOC,QAC3CC,KAAK,cACLD,MAAOR,EAAgBU,gBACvBC,GAAG,kBACHC,QAASb,IAAeC,EAAgBU,kBAE5C,cAACT,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,kBAA1B,gCAGJ,eAACb,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLC,SAAU,SAACC,GAAD,OAAOR,EAAiBQ,EAAEC,OAAOC,QAC3CC,KAAK,cACLD,MAAOR,EAAgBe,kBACvBJ,GAAG,oBACHC,QAASb,IAAeC,EAAgBe,oBAE5C,cAACd,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,oBAA1B,kCAGJ,eAACb,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLC,SAAU,SAACC,GAAD,OAAOR,EAAiBQ,EAAEC,OAAOC,QAC3CC,KAAK,cACLD,MAAOR,EAAgBgB,gBACvBL,GAAG,kBACHC,QAASb,IAAeC,EAAgBgB,kBAE5C,cAACf,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,kBAA1B,gCAGJ,eAACb,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLC,SAAU,SAACC,GAAD,OAAOR,EAAiBQ,EAAEC,OAAOC,QAC3CC,KAAK,cACLD,MAAOR,EAAgBiB,kBACvBN,GAAG,oBACHC,QAASb,IAAeC,EAAgBiB,oBAE5C,cAAChB,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,oBAA1B,sCClBDI,EAhCK,SAAC,GAAyE,IAAvEC,EAAsE,EAAtEA,gBAAiBC,EAAqD,EAArDA,YAAapB,EAAwC,EAAxCA,gBACjD,OACI,qCACI,oBAAIpB,UAAU,2BAAd,mBAEA,eAACqB,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,QACLE,GAAG,cACHH,MAAOR,EAAgBqB,mBACvBhB,SAAU,SAACC,GAAD,OAAOa,EAAgBb,EAAEC,OAAOC,QAC1CI,QAASQ,IAAgBpB,EAAgBqB,qBAE7C,cAACpB,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,cAA1B,sBAGJ,eAACb,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,QACLE,GAAG,cACHH,MAAOR,EAAgBsB,mBACvBjB,SAAU,SAACC,GAAD,OAAOa,EAAgBb,EAAEC,OAAOC,QAC1CI,QAASQ,IAAgBpB,EAAgBsB,qBAE7C,cAACrB,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,cAA1B,0BCMDS,EAhCO,SAAC,GAA+E,IAA7EC,EAA4E,EAA5EA,mBAAoBC,EAAwD,EAAxDA,aAAczB,EAA0C,EAA1CA,gBACvD,OACI,qCACI,oBAAIpB,UAAU,2BAAd,qDAEA,eAACqB,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,iBACLE,GAAG,cACHH,MAAOR,EAAgB0B,oBACvBrB,SAAU,SAACC,GAAD,OAAOkB,EAAmBlB,EAAEC,OAAOC,QAC7CI,QAASa,IAAiBzB,EAAgB0B,sBAE9C,cAACzB,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,cAA1B,sBAGJ,eAACb,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,iBACLE,GAAG,mBACHH,MAAOR,EAAgB2B,yBACvBtB,SAAU,SAACC,GAAD,OAAOkB,EAAmBlB,EAAEC,OAAOC,QAC7CI,QAASa,IAAiBzB,EAAgB2B,2BAE9C,cAAC1B,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,mBAA1B,+BCMDc,EAhCU,SAAC,GAA0F,IAAxFC,EAAuF,EAAvFA,uBAAwBC,EAA+D,EAA/DA,iBAAkB9B,EAA6C,EAA7CA,gBAClE,OACI,qCACI,oBAAIpB,UAAU,2BAAd,gCAEA,eAACqB,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,QACLE,GAAG,cACHH,MAAOR,EAAgB+B,yBACvB1B,SAAU,SAACC,GAAD,OAAOuB,EAAuBvB,EAAEC,OAAOC,QACjDI,QAASkB,IAAqB9B,EAAgB+B,2BAElD,cAAC9B,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,cAA1B,sBAGJ,eAACb,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,QACLE,GAAG,aACHH,MAAOR,EAAgBgC,wBACvB3B,SAAU,SAACC,GAAD,OAAOuB,EAAuBvB,EAAEC,OAAOC,QACjDI,QAASkB,IAAqB9B,EAAgBgC,0BAElD,cAAC/B,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,aAA1B,yBCsBDmB,EAhDS,SAAC,GAAwF,IAAtFC,EAAqF,EAArFA,uBAAwBC,EAA6D,EAA7DA,gBAAiBnC,EAA4C,EAA5CA,gBAChE,OACI,qCACI,oBAAIpB,UAAU,2BAAd,+BAEA,eAACqB,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,mBACLE,GAAG,gBACHH,MAAOR,EAAgBoC,0BACvB/B,SAAU,SAACC,GAAD,OAAO4B,EAAuB5B,EAAEC,OAAOC,QACjDI,QAASuB,IAAoBnC,EAAgBoC,4BAEjD,cAACnC,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,gBAA1B,wBAGJ,eAACb,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,mBACLE,GAAG,kBACHH,MAAOR,EAAgBqC,4BACvBhC,SAAU,SAACC,GAAD,OAAO4B,EAAuB5B,EAAEC,OAAOC,QACjDI,QAASuB,IAAoBnC,EAAgBqC,8BAEjD,eAACpC,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,kBAA1B,uBACc,6DAIlB,eAACb,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,mBACLE,GAAG,gBACHH,MAAOR,EAAgBsC,0BACvBjC,SAAU,SAACC,GAAD,OAAO4B,EAAuB5B,EAAEC,OAAOC,QACjDI,QAASuB,IAAoBnC,EAAgBsC,4BAEjD,eAACrC,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,gBAA1B,qBACY,2DCxBbyB,EAnBS,SAAC,GAA8E,IAA5EC,EAA2E,EAA3EA,0BAA2BC,EAAgD,EAAhDA,oBAClD,OACI,qCACI,oBAAI7D,UAAU,2BAAd,+BAEA,eAACqB,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,WACLK,KAAK,mBACLE,GAAG,oBACHN,SAAU,SAACC,GAAD,OAAOkC,EAA0BlC,EAAEC,OAAOK,UACpDA,QAAS6B,IAEb,cAACxC,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,oBAA1B,2BCqBD4B,EAhCK,SAAC,GAA2E,IAAzEC,EAAwE,EAAxEA,kBAAmBC,EAAqD,EAArDA,YAAa5C,EAAwC,EAAxCA,gBACnD,OACI,qCACI,oBAAIpB,UAAU,2BAAd,oBAEA,eAACqB,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,eACLE,GAAG,mBACHH,MAAOR,EAAgB6C,kBACvBxC,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,EAAEC,OAAOC,QAC5CI,QAASgC,IAAgB5C,EAAgB6C,oBAE7C,cAAC5C,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,mBAA1B,qBAGJ,eAACb,EAAA,EAAKC,MAAN,CAAYtB,UAAU,8BAAtB,UACI,cAACqB,EAAA,EAAKC,MAAMC,MAAZ,CACIC,KAAK,QACLK,KAAK,eACLE,GAAG,oBACHH,MAAOR,EAAgB8C,mBACvBzC,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,EAAEC,OAAOC,QAC5CI,QAASgC,IAAgB5C,EAAgB8C,qBAE7C,cAAC7C,EAAA,EAAKC,MAAMW,MAAZ,CAAkBC,QAAQ,oBAA1B,0BCkPDiC,EAtPS,WACpB,IAAMC,EAAWC,cACT7D,EAAUJ,cAAVI,MAFkB,EAYtB8D,aAAY,SAACC,GAAD,MAAuB,CACnCpD,WAAYoD,EAAMC,OAAOrD,WACzBqB,YAAa+B,EAAMC,OAAOhC,YAC1BK,aAAc0B,EAAMC,OAAO3B,aAC3BK,iBAAkBqB,EAAMC,OAAOtB,iBAC/BK,gBAAiBgB,EAAMC,OAAOjB,gBAC9BM,oBAAqBU,EAAMC,OAAOX,oBAClCG,YAAaO,EAAMC,OAAOR,gBAd1B7C,EALsB,EAKtBA,WACAqB,EANsB,EAMtBA,YACAK,EAPsB,EAOtBA,aACAU,EARsB,EAQtBA,gBACAL,EATsB,EAStBA,iBACAW,EAVsB,EAUtBA,oBACAG,EAXsB,EAWtBA,YAXsB,EAsB8B3D,oBAAkB,GAtBhD,mBAsBnBoE,EAtBmB,KAsBGC,EAtBH,OAuB4BrE,oBAAkB,GAvB9C,mBAuBnBsE,EAvBmB,KAuBEC,EAvBF,OAwB0BvE,oBAAkB,GAxB5C,mBAwBnBwE,EAxBmB,KAwBCC,EAxBD,OAyB0BzE,oBAAkB,GAzB5C,mBAyBnB0E,EAzBmB,KAyBCC,EAzBD,KA8BpBC,EAAsBC,uBAAY,WACpCR,EAAwBvD,IAAeC,IAA4BiB,mBACnEuC,EAAuBzD,IAAeC,IAA4Be,mBAClE2C,EACI3D,IAAeC,IAA4Be,mBACvChB,IAAeC,IAA4BiB,mBAC3C7B,EAAQ,KAEhBwE,EACI7D,IAAeC,IAA4Be,mBACvChB,IAAeC,IAA4BiB,qBAEpD,CAAClB,EAAYX,IAEhBK,qBAAU,WACNoE,MACD,CAACA,IAKJ,IAAM/D,EAAmB,SAACU,GAEtB,OADaA,GAET,IAAK,aACDwC,EAASe,YAAa/D,IAA4Be,oBAClD,MACJ,IAAK,WACDiC,EAASe,YAAa/D,IAA4BgB,kBAClD,MACJ,IAAK,WACDgC,EAASe,YAAa/D,IAA4BU,kBAClD,MACJ,QACIsC,EAASe,YAAa/D,IAA4BiB,sBAQxDE,EAAkB,SAACX,GAGrB,OAFWA,GAGP,IAAK,QACDwC,EAASgB,YAAkBhE,IAA4BsB,qBACvD,MACJ,QACI0B,EAASgB,YAAkBhE,IAA4BqB,uBAQ7DG,EAAqB,SAAChB,GAGxB,OAFeA,GAGX,IAAK,aACDwC,EAASiB,YAAoBjE,IAA8B2B,2BAC3D,MACJ,QACIqB,EAASiB,YAAoBjE,IAA8B0B,wBAQjEG,EAAyB,SAACrB,GAE5B,OADYA,GAER,IAAK,OACDwC,EAASkB,YAAmBlE,IAA6BgC,0BACzD,MACJ,QACIgB,EAASkB,YAAmBlE,IAA6B+B,6BAQ/DG,EAAyB,SAAC1B,GAE5B,OADWA,GAEP,IAAK,YACDwC,EAASmB,YAAkBnE,IAA6BqC,8BACxD,MACJ,IAAK,UACDW,EAASmB,YAAkBnE,IAA6BsC,4BACxD,MACJ,QACIU,EAASmB,YAAkBnE,IAA6BoC,8BAQ9DI,EAA4B,SAAChC,GAC/B,IAAII,EAAUJ,EACdwC,EAASoB,YAAsBxD,KAM7B+B,EAAoB,SAACnC,GAEvB,OADYA,GAER,IAAK,QACDwC,EAASqB,YAAkBrE,IAA4B8C,qBACvD,MACJ,QACIE,EAASqB,YAAkBrE,IAA4B6C,sBAkBnE,OACI,eAAC,IAAMyB,SAAP,WACI,oBAAI1F,UAAU,kDAAd,SACI,sBAAMA,UAAU,eAAhB,8BAEJ,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,sBAAsB2F,KAAK,QAA1C,UACI,gDADJ,mDAKA,cAAC,EAAD,CACIzE,iBAAkBA,EAClBC,WAAYA,EACZC,gBAAiBA,MAIrB,cAAC,EAAD,CACImB,gBAAiBA,EACjBC,YAAaA,EACbpB,gBAAiBA,MAIpBqD,GACG,cAAC,EAAD,CACI5B,aAAcA,EACdD,mBAAoBA,EACpBxB,gBAAiBA,MAKxBuD,GACG,cAAC,EAAD,CACI1B,uBAAwBA,EACxBC,iBAAkBA,EAClB9B,gBAAiBA,MAKxByD,GACG,cAAC,EAAD,CACIvB,uBAAwBA,EACxBC,gBAAiBA,EACjBnC,gBAAiBA,MAKxB2D,GACG,cAAC,EAAD,CACInB,0BAA2BA,EAC3BC,oBAAqBA,IAK7B,cAAC,EAAD,CACIE,kBAAmBA,EACnBC,YAAaA,EACb5C,gBAAiBA,MAGrB,qBAAKpB,UAAU,cAAf,SACI,wBAAQA,UAAU,kBAAkB+B,GAAG,WAAW6D,QAAS,kBA5EvE1E,EAAiBE,IAA4BiB,mBAC7CE,EAAgBnB,IAA4BqB,oBAC5CG,EAAmBxB,IAA8B0B,qBACjDG,EAAuB7B,IAA6B+B,0BACpDS,GAA0B,GAC1BG,EAAkB3C,IAA4B8C,yBAC9CZ,EAAuBlC,IAA6BoC,4BAsExC,uC,SC/MLqC,UA3CM,SAACC,GAClB,IAAM1B,EAAWC,cACX0B,EAAuBC,iBAAO,MAE5BC,EAAuB3B,aAAY,SAACC,GAAD,MAAuB,CAC9D0B,mBAAoB1B,EAAMC,OAAOyB,uBAD7BA,mBAOFC,EAAmBhB,uBACrB,SAACxD,GACG,GAAIuE,EAAoB,CACpB,GAAIF,GAAmBA,EAAgBI,SAAWJ,EAAgBI,QAAQC,SAAS1E,EAAEC,QACjF,OAEAyC,EAASiC,kBAIrB,CAACN,EAAiB3B,EAAU6B,IAUhC,OAPApF,qBAAU,WAEN,OADAyF,SAASvF,iBAAiB,YAAamF,GAAkB,GAClD,WACHI,SAAStF,oBAAoB,YAAakF,GAAkB,MAEjE,CAACA,IAGA,eAAC,IAAMR,SAAP,WACI,qBAAK1F,UAAU,YAAYuG,IAAKR,EAAhC,SACI,cAAChG,EAAA,EAAD,CAAWE,MAAO,CAAEuG,UAAW,OAAQC,OAAQ,KAASC,QAAS,IAAKC,iBAAkB,IAAxF,SACI,cAAC,EAAD,QAGR,qBAAK3G,UAAU","file":"static/js/8.07c16dff.chunk.js","sourcesContent":["import React from 'react';\nimport SimpleBar from 'simplebar-react';\n\ninterface ScrollbarProps extends SimpleBar.Props {\n    className?: string;\n    style?: any;\n    children?: any;\n}\n\nconst Scrollbar = ({ className, style, children, ...otherProps }: ScrollbarProps) => {\n    return (\n        <SimpleBar className={className} style={style} {...otherProps}>\n            {children}\n        </SimpleBar>\n    );\n};\n\nexport default Scrollbar;\n","import { useState, useEffect } from 'react';\n\nconst useViewport = () => {\n    const [width, setWidth] = useState(window.innerWidth);\n    const [height, setHeight] = useState(window.innerHeight);\n\n    useEffect(() => {\n        const handleWindowResize = () => {\n            setWidth(window.innerWidth);\n            setHeight(window.innerHeight);\n        };\n\n        window.addEventListener('resize', handleWindowResize);\n        return () => window.removeEventListener('resize', handleWindowResize);\n    }, []);\n    return { width, height };\n};\n\nexport { useViewport };\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ninterface LayoutTypesProps {\n    changeLayoutType: (value: any) => void;\n    layoutType: string;\n    layoutConstants: typeof layoutConstants.LayoutTypes;\n}\n\nconst LayoutTypes = ({ changeLayoutType, layoutType, layoutConstants }: LayoutTypesProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium mt-4 mb-2 pb-1\">Layout</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_VERTICAL}\n                    id=\"vertical-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_VERTICAL}\n                />\n                <Form.Check.Label htmlFor=\"vertical-layout\">Vertical Layout</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_HORIZONTAL}\n                    id=\"horizontal-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_HORIZONTAL}\n                />\n                <Form.Check.Label htmlFor=\"horizontal-layout\">Horizontal Layout</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_DETACHED}\n                    id=\"detached-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_DETACHED}\n                />\n                <Form.Check.Label htmlFor=\"detached-layout\">Detached Layout</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_TWO_COLUMN}\n                    id=\"two-column-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_TWO_COLUMN}\n                />\n                <Form.Check.Label htmlFor=\"two-column-layout\">Two Column Layout</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LayoutTypes;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ninterface LayoutWidthProps {\n    changeWidthMode: (value: any) => void;\n    layoutWidth: string;\n    layoutConstants: typeof layoutConstants.LayoutWidth;\n}\n\nconst LayoutWidth = ({ changeWidthMode, layoutWidth, layoutConstants }: LayoutWidthProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium mt-4 mb-2 pb-1\">Width</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"width\"\n                    id=\"fluid-check\"\n                    value={layoutConstants.LAYOUT_WIDTH_FLUID}\n                    onChange={(e) => changeWidthMode(e.target.value)}\n                    checked={layoutWidth === layoutConstants.LAYOUT_WIDTH_FLUID}\n                />\n                <Form.Check.Label htmlFor=\"fluid-check\">Fluid</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"width\"\n                    id=\"boxed-check\"\n                    value={layoutConstants.LAYOUT_WIDTH_BOXED}\n                    onChange={(e) => changeWidthMode(e.target.value)}\n                    checked={layoutWidth === layoutConstants.LAYOUT_WIDTH_BOXED}\n                />\n                <Form.Check.Label htmlFor=\"boxed-check\">Boxed</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LayoutWidth;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ninterface MenuPositionsProps {\n    changeMenuPosition: (value: any) => void;\n    menuPosition: string;\n    layoutConstants: typeof layoutConstants.MenuPositions;\n}\n\nconst MenuPositions = ({ changeMenuPosition, menuPosition, layoutConstants }: MenuPositionsProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium mt-4 mb-2 pb-1\">Menus (Leftsidebar and Topbar) Position</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"menus-position\"\n                    id=\"fixed-check\"\n                    value={layoutConstants.MENU_POSITION_FIXED}\n                    onChange={(e) => changeMenuPosition(e.target.value)}\n                    checked={menuPosition === layoutConstants.MENU_POSITION_FIXED}\n                />\n                <Form.Check.Label htmlFor=\"fixed-check\">Fixed</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"menus-position\"\n                    id=\"scrollable-check\"\n                    value={layoutConstants.MENU_POSITION_SCROLLABLE}\n                    onChange={(e) => changeMenuPosition(e.target.value)}\n                    checked={menuPosition === layoutConstants.MENU_POSITION_SCROLLABLE}\n                />\n                <Form.Check.Label htmlFor=\"scrollable-check\">Scrollable</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default MenuPositions;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ninterface LeftSideBarThemeProps {\n    changeLeftSidebarTheme: (value: any) => void;\n    leftSideBarTheme: string;\n    layoutConstants: typeof layoutConstants.SideBarTheme;\n}\n\nconst LeftSideBarTheme = ({ changeLeftSidebarTheme, leftSideBarTheme, layoutConstants }: LeftSideBarThemeProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium mt-4 mb-2 pb-1\">Left Sidebar Color</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"theme\"\n                    id=\"light-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_LIGHT}\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_LIGHT}\n                />\n                <Form.Check.Label htmlFor=\"light-check\">Light</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"theme\"\n                    id=\"dark-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_DARK}\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_DARK}\n                />\n                <Form.Check.Label htmlFor=\"dark-check\">Dark</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LeftSideBarTheme;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ninterface LeftSideBarTypeProps {\n    changeLeftSiderbarType: (value: any) => void;\n    leftSideBarType: string;\n    layoutConstants: typeof layoutConstants.SideBarTypes;\n}\n\nconst LeftSideBarType = ({ changeLeftSiderbarType, leftSideBarType, layoutConstants }: LeftSideBarTypeProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium mt-4 mb-2 pb-1\">Left Sidebar Size</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"leftsidebar-size\"\n                    id=\"default-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_DEFAULT}\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_DEFAULT}\n                />\n                <Form.Check.Label htmlFor=\"default-check\">Default</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"leftsidebar-size\"\n                    id=\"condensed-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED}\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED}\n                />\n                <Form.Check.Label htmlFor=\"condensed-check\">\n                    Condensed <small>(Extra Small size)</small>\n                </Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"leftsidebar-size\"\n                    id=\"compact-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_COMPACT}\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_COMPACT}\n                />\n                <Form.Check.Label htmlFor=\"compact-check\">\n                    Compact <small>(Small size)</small>\n                </Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LeftSideBarType;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\n\ninterface SidebarUserInfoProps {\n    toggleLeftSidebarUserInfo: (value: any) => void;\n    showSidebarUserInfo: boolean;\n}\n\nconst SidebarUserInfo = ({ toggleLeftSidebarUserInfo, showSidebarUserInfo }: SidebarUserInfoProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium mt-4 mb-2 pb-1\">Sidebar User Info</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"checkbox\"\n                    name=\"leftsidebar-user\"\n                    id=\"sidebaruser-check\"\n                    onChange={(e) => toggleLeftSidebarUserInfo(e.target.checked)}\n                    checked={showSidebarUserInfo}\n                />\n                <Form.Check.Label htmlFor=\"sidebaruser-check\">Enable</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default SidebarUserInfo;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ninterface TopbarThemeProps {\n    changeTopBarTheme: (value: any) => void;\n    topbarTheme: string;\n    layoutConstants: typeof layoutConstants.TopbarTheme;\n}\n\nconst TopbarTheme = ({ changeTopBarTheme, topbarTheme, layoutConstants }: TopbarThemeProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium mt-4 mb-2 pb-1\">Topbar</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"topbar-color\"\n                    id=\"darktopbar-check\"\n                    value={layoutConstants.TOPBAR_THEME_DARK}\n                    onChange={(e) => changeTopBarTheme(e.target.value)}\n                    checked={topbarTheme === layoutConstants.TOPBAR_THEME_DARK}\n                />\n                <Form.Check.Label htmlFor=\"darktopbar-check\">Dark</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"topbar-color\"\n                    id=\"lighttopbar-check\"\n                    value={layoutConstants.TOPBAR_THEME_LIGHT}\n                    onChange={(e) => changeTopBarTheme(e.target.value)}\n                    checked={topbarTheme === layoutConstants.TOPBAR_THEME_LIGHT}\n                />\n                <Form.Check.Label htmlFor=\"lighttopbar-check\">Light</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default TopbarTheme;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// actions\nimport {\n    changeLayout,\n    changeLayoutWidth,\n    changeMenuPositions,\n    changeSidebarTheme,\n    changeSidebarType,\n    toggleSidebarUserInfo,\n    changeTopbarTheme,\n} from '../../redux/actions';\n\n// store\nimport { RootState, AppDispatch } from '../../redux/store';\n\n// constants\nimport * as layoutConstants from '../../constants/layout';\n\n// custom hook\nimport { useViewport } from '../../hooks/useViewPort';\n\n// components\nimport LayoutTypes from './LayoutTypes';\nimport LayoutWidth from './LayoutWidth';\nimport MenuPositions from './MenuPositions';\nimport LeftSideBarTheme from './LeftSideBarTheme';\nimport LeftSideBarType from './LeftSideBarType';\nimport SidebarUserInfo from './SidebarUserInfo';\nimport TopbarTheme from './TopbarTheme';\n\nconst ThemeCustomizer = () => {\n    const dispatch = useDispatch<AppDispatch>();\n    const { width } = useViewport();\n\n    const {\n        layoutType,\n        layoutWidth,\n        menuPosition,\n        leftSideBarType,\n        leftSideBarTheme,\n        showSidebarUserInfo,\n        topbarTheme,\n    } = useSelector((state: RootState) => ({\n        layoutType: state.Layout.layoutType,\n        layoutWidth: state.Layout.layoutWidth,\n        menuPosition: state.Layout.menuPosition,\n        leftSideBarTheme: state.Layout.leftSideBarTheme,\n        leftSideBarType: state.Layout.leftSideBarType,\n        showSidebarUserInfo: state.Layout.showSidebarUserInfo,\n        topbarTheme: state.Layout.topbarTheme,\n    }));\n\n    const [disableMenuPositions, setDisableMenuPositions] = useState<boolean>(false);\n    const [disableSidebarTheme, setDisableSidebarTheme] = useState<boolean>(false);\n    const [disableSidebarType, setDisableSidebarType] = useState<boolean>(false);\n    const [disableSidebarUser, setDisableSidebarUser] = useState<boolean>(false);\n\n    /**\n     * change state based on props changes\n     */\n    const _loadStateFromProps = useCallback(() => {\n        setDisableMenuPositions(layoutType !== layoutConstants.LayoutTypes.LAYOUT_TWO_COLUMN);\n        setDisableSidebarTheme(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n        setDisableSidebarType(\n            layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL &&\n                layoutType !== layoutConstants.LayoutTypes.LAYOUT_TWO_COLUMN &&\n                width > 991\n        );\n        setDisableSidebarUser(\n            layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL &&\n                layoutType !== layoutConstants.LayoutTypes.LAYOUT_TWO_COLUMN\n        );\n    }, [layoutType, width]);\n\n    useEffect(() => {\n        _loadStateFromProps();\n    }, [_loadStateFromProps]);\n\n    /**\n     * On layout change\n     */\n    const changeLayoutType = (value: any) => {\n        var layout = value;\n        switch (layout) {\n            case 'horizontal':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\n                break;\n            case 'detached':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_DETACHED));\n                break;\n            case 'vertical':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\n                break;\n            default:\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_TWO_COLUMN));\n                break;\n        }\n    };\n\n    /**\n     * Change the width mode\n     */\n    const changeWidthMode = (value: any) => {\n        var mode = value;\n\n        switch (mode) {\n            case 'boxed':\n                dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_BOXED));\n                break;\n            default:\n                dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID));\n                break;\n        }\n    };\n\n    /*\n     * Change menus position\n     */\n    const changeMenuPosition = (value: any) => {\n        var position = value;\n\n        switch (position) {\n            case 'scrollable':\n                dispatch(changeMenuPositions(layoutConstants.MenuPositions.MENU_POSITION_SCROLLABLE));\n                break;\n            default:\n                dispatch(changeMenuPositions(layoutConstants.MenuPositions.MENU_POSITION_FIXED));\n                break;\n        }\n    };\n\n    /**\n     * Changes the theme\n     */\n    const changeLeftSidebarTheme = (value: any) => {\n        var theme = value;\n        switch (theme) {\n            case 'dark':\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DARK));\n                break;\n            default:\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT));\n                break;\n        }\n    };\n\n    /**\n     * Change the leftsiderbar type\n     */\n    const changeLeftSiderbarType = (value: any) => {\n        var type = value;\n        switch (type) {\n            case 'condensed':\n                dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED));\n                break;\n            case 'compact':\n                dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_COMPACT));\n                break;\n            default:\n                dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\n                break;\n        }\n    };\n\n    /*\n     * Toggle the leftsidebar use info\n     */\n    const toggleLeftSidebarUserInfo = (value: any) => {\n        var checked = value;\n        dispatch(toggleSidebarUserInfo(checked));\n    };\n\n    /*\n     * Change topbar theme\n     */\n    const changeTopBarTheme = (value: any) => {\n        var theme = value;\n        switch (theme) {\n            case 'light':\n                dispatch(changeTopbarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_LIGHT));\n                break;\n            default:\n                dispatch(changeTopbarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_DARK));\n                break;\n        }\n    };\n\n    /**\n     * Reset everything\n     */\n    const reset = () => {\n        changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_TWO_COLUMN);\n        changeWidthMode(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID);\n        changeMenuPosition(layoutConstants.MenuPositions.MENU_POSITION_FIXED);\n        changeLeftSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT);\n        toggleLeftSidebarUserInfo(false);\n        changeTopBarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_LIGHT);\n        changeLeftSiderbarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT);\n    };\n\n    return (\n        <React.Fragment>\n            <h6 className=\"fw-medium px-3 m-0 py-2 text-uppercase bg-light\">\n                <span className=\"d-block py-1\">Theme Settings</span>\n            </h6>\n            <div className=\"p-3\">\n                <div className=\"alert alert-warning\" role=\"alert\">\n                    <strong>Customize </strong> the overall color scheme, sidebar menu, etc.\n                </div>\n\n                {/* Layouts */}\n                <LayoutTypes\n                    changeLayoutType={changeLayoutType}\n                    layoutType={layoutType}\n                    layoutConstants={layoutConstants.LayoutTypes}\n                />\n\n                {/* Width */}\n                <LayoutWidth\n                    changeWidthMode={changeWidthMode}\n                    layoutWidth={layoutWidth}\n                    layoutConstants={layoutConstants.LayoutWidth}\n                />\n\n                {/* Menu Posiotions */}\n                {disableMenuPositions && (\n                    <MenuPositions\n                        menuPosition={menuPosition}\n                        changeMenuPosition={changeMenuPosition}\n                        layoutConstants={layoutConstants.MenuPositions}\n                    />\n                )}\n\n                {/* Left Sidebar */}\n                {disableSidebarTheme && (\n                    <LeftSideBarTheme\n                        changeLeftSidebarTheme={changeLeftSidebarTheme}\n                        leftSideBarTheme={leftSideBarTheme}\n                        layoutConstants={layoutConstants.SideBarTheme}\n                    />\n                )}\n\n                {/* Left Sidebar Size */}\n                {disableSidebarType && (\n                    <LeftSideBarType\n                        changeLeftSiderbarType={changeLeftSiderbarType}\n                        leftSideBarType={leftSideBarType}\n                        layoutConstants={layoutConstants.SideBarTypes}\n                    />\n                )}\n\n                {/* User Info */}\n                {disableSidebarUser && (\n                    <SidebarUserInfo\n                        toggleLeftSidebarUserInfo={toggleLeftSidebarUserInfo}\n                        showSidebarUserInfo={showSidebarUserInfo}\n                    />\n                )}\n\n                {/* Topbar */}\n                <TopbarTheme\n                    changeTopBarTheme={changeTopBarTheme}\n                    topbarTheme={topbarTheme}\n                    layoutConstants={layoutConstants.TopbarTheme}\n                />\n\n                <div className=\"d-grid mt-4\">\n                    <button className=\"btn btn-primary\" id=\"resetBtn\" onClick={() => reset()}>\n                        Reset to Default\n                    </button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default ThemeCustomizer;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// actions\nimport { hideRightSidebar } from '../redux/actions';\n\n// store\nimport { AppDispatch, RootState } from '../redux/store';\n\n// components\nimport ThemeCustomizer from '../components/ThemeCustomizer/';\nimport Scrollbar from '../components/Scrollbar';\n\ninterface RightSideBarProps {\n    hideRightSidebar?: () => void;\n    title?: string;\n    children?: any;\n}\n\nconst RightSideBar = (props: RightSideBarProps) => {\n    const dispatch = useDispatch<AppDispatch>();\n    const rightBarNodeRef: any = useRef(null);\n\n    const { isOpenRightSideBar } = useSelector((state: RootState) => ({\n        isOpenRightSideBar: state.Layout.isOpenRightSideBar,\n    }));\n\n    /**\n     * Handle the click anywhere in doc\n     */\n    const handleOtherClick = useCallback(\n        (e: any) => {\n            if (isOpenRightSideBar) {\n                if (rightBarNodeRef && rightBarNodeRef.current && rightBarNodeRef.current.contains(e.target)) {\n                    return;\n                } else {\n                    dispatch(hideRightSidebar());\n                }\n            }\n        },\n        [rightBarNodeRef, dispatch, isOpenRightSideBar]\n    );\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleOtherClick, false);\n        return () => {\n            document.removeEventListener('mousedown', handleOtherClick, false);\n        };\n    }, [handleOtherClick]);\n\n    return (\n        <React.Fragment>\n            <div className=\"right-bar\" ref={rightBarNodeRef}>\n                <Scrollbar style={{ maxHeight: '100%', zIndex: 10000 }} timeout={500} scrollbarMaxSize={320}>\n                    <ThemeCustomizer />\n                </Scrollbar>\n            </div>\n            <div className=\"rightbar-overlay\"></div>\n        </React.Fragment>\n    );\n};\n\nexport default RightSideBar;\n"],"sourceRoot":""}