{"version":3,"sources":["components/PageTitle.tsx","pages/tables/Basic.tsx"],"names":["PageTitle","props","className","title","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","records","id","firstName","lastName","userName","BasicTable","Body","scope","record","InverseTable","variant","TableHeadOptions","theadClass","BorderedTable","bordered","BorderedColorTable","BorderlessTable","borderless","SmallTable","size","colSpan","HoverableTable","hover","ActiveTable","classNames","StripedRowsTable","striped","TableCaption","slice","ContextualClasses","NestingTables","ResponsiveTable","responsive","Tables","Fragment","lg"],"mappings":"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","file":"static/js/77.501399d0.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ninterface BreadcrumbItems {\n    label: string;\n    path: string;\n    active?: boolean;\n}\n\ninterface PageTitleProps {\n    breadCrumbItems: Array<BreadcrumbItems>;\n    title: string;\n}\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Shreyu</Breadcrumb.Item>\n\n                            {(props.breadCrumbItems || []).map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import React from 'react';\nimport { Row, Col, Card, Table } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\ninterface TableRecords {\n    id: number;\n    firstName: string;\n    lastName: string;\n    userName: string;\n}\n\n// dummy records\nconst records: TableRecords[] = [\n    { id: 1, firstName: 'Mark', lastName: 'Otto', userName: '@mdo' },\n    { id: 2, firstName: 'Jacob', lastName: 'Thornton', userName: '@fat' },\n    { id: 3, firstName: 'Larry', lastName: 'the Bird', userName: '@twitter' },\n];\n\nconst BasicTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Basic example</h4>\n                <p className=\"sub-header\">\n                    For basic styling—light padding and only horizontal dividers—add the base class <code>.table</code>{' '}\n                    to any <code>&lt;Table&gt;</code>.\n                </p>\n\n                <div className=\"table-responsive\">\n                    <Table className=\"table mb-0\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">First</th>\n                                <th scope=\"col\">Last</th>\n                                <th scope=\"col\">Handle</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {(records || []).map((record, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <th scope=\"row\">{record.id}</th>\n                                        <td>{record.firstName}</td>\n                                        <td>{record.lastName}</td>\n                                        <td>{record.userName}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InverseTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Table Dark</h4>\n                <p className=\"sub-header\">\n                    You can also invert the colors—with light text on dark backgrounds—by specifying variant{' '}\n                    <code>dark</code>.\n                </p>\n\n                <div className=\"table-responsive\">\n                    <Table className=\"mb-0\" variant=\"dark\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">First</th>\n                                <th scope=\"col\">Last</th>\n                                <th scope=\"col\">Handle</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {(records || []).map((record, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <th scope=\"row\">{record.id}</th>\n                                        <td>{record.firstName}</td>\n                                        <td>{record.lastName}</td>\n                                        <td>{record.userName}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst TableHeadOptions = ({ variant }: { variant: string }) => {\n    const theadClass: string = variant === 'light' ? 'table-light' : 'table-dark';\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title mt-0 mb-1\">Table head {variant}</h4>\n                    <p className=\"sub-header\">\n                        Use one of two modifier classes to make <code>&lt;thead&gt;</code>s appear light or dark gray.\n                    </p>\n                    <div className=\"table-responsive\">\n                        <Table className=\"mb-0\">\n                            <thead className={theadClass}>\n                                <tr>\n                                    <th scope=\"col\">#</th>\n                                    <th scope=\"col\">First</th>\n                                    <th scope=\"col\">Last</th>\n                                    <th scope=\"col\">Handle</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {(records || []).map((record, index) => {\n                                    return (\n                                        <tr key={index}>\n                                            <th scope=\"row\">{record.id}</th>\n                                            <td>{record.firstName}</td>\n                                            <td>{record.lastName}</td>\n                                            <td>{record.userName}</td>\n                                        </tr>\n                                    );\n                                })}\n                            </tbody>\n                        </Table>\n                    </div>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst BorderedTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Bordered table</h4>\n                <p className=\"sub-header\">\n                    Add <code>bordered</code> attribute for borders on all sides of the table and cells.\n                </p>\n\n                <div className=\"table-responsive\">\n                    <Table className=\"mb-0\" bordered>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">First</th>\n                                <th scope=\"col\">Last</th>\n                                <th scope=\"col\">Handle</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {(records || []).map((record, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <th scope=\"row\">{record.id}</th>\n                                        <td>{record.firstName}</td>\n                                        <td>{record.lastName}</td>\n                                        <td>{record.userName}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BorderedColorTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Border Color</h4>\n                <p className=\"sub-header\">\n                    Add <code>.border-primary</code> for customised borders on all sides of the table and cells.\n                </p>\n\n                <Table className=\"border-primary mb-0\" bordered>\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">First</th>\n                            <th scope=\"col\">Last</th>\n                            <th scope=\"col\">Handle</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {(records || []).map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.userName}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BorderlessTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Borderless table</h4>\n                <p className=\"sub-header\">\n                    Add <code>borderless</code> attribute for a table without borders.\n                </p>\n\n                <div className=\"table-responsive\">\n                    <Table className=\"mb-0\" borderless>\n                        <thead className=\"table-light\">\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">First</th>\n                                <th scope=\"col\">Last</th>\n                                <th scope=\"col\">Handle</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {(records || []).map((record, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <th scope=\"row\">{record.id}</th>\n                                        <td>{record.firstName}</td>\n                                        <td>{record.lastName}</td>\n                                        <td>{record.userName}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst SmallTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Small table</h4>\n                <p className=\"sub-header\">\n                    Add <code>size=\"sm\"</code> attribute to make tables more compact by cutting cell padding in half\n                </p>\n\n                <Table className=\"mb-0\" size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">First</th>\n                            <th scope=\"col\">Last</th>\n                            <th scope=\"col\">Handle</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {(records || []).map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.userName}</td>\n                                </tr>\n                            );\n                        })}\n                        <tr>\n                            <th scope=\"row\">4</th>\n                            <td colSpan={2}>Mark Otto</td>\n                            <td>@mdo</td>\n                        </tr>\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HoverableTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Hoverable Rows</h4>\n                <p className=\"sub-header\">\n                    Add <code>hover</code> attribute to enable a hover state on table rows\n                </p>\n\n                <Table className=\"mb-0\" hover>\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">First</th>\n                            <th scope=\"col\">Last</th>\n                            <th scope=\"col\">Handle</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {(records || []).map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.userName}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ActiveTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Active Tables</h4>\n                <p className=\"sub-header\">\n                    Add <code>.table-active</code> to highlight a table row or cell.\n                </p>\n                <div className=\"table-responsive\">\n                    <Table className=\"mb-0\" hover>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">First</th>\n                                <th scope=\"col\">Last</th>\n                                <th scope=\"col\">Handle</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {(records || []).map((record, index) => {\n                                return (\n                                    <tr key={index} className={classNames({ 'table-active': index === 0 })}>\n                                        <th scope=\"row\">{record.id}</th>\n                                        <td>{record.firstName}</td>\n                                        <td className={classNames({ 'table-active': index === 2 })}>\n                                            {record.lastName}\n                                        </td>\n                                        <td>{record.userName}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst StripedRowsTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Striped Rows</h4>\n                <p className=\"sub-header\">\n                    Use <code>striped</code> attribute to add zebra-striping to any table row within the{' '}\n                    <code>&lt;tbody&gt;</code>.\n                </p>\n\n                <div className=\"table-responsive\">\n                    <Table className=\"mb-0\" striped>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">First</th>\n                                <th scope=\"col\">Last</th>\n                                <th scope=\"col\">Handle</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {(records || []).map((record, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <th scope=\"row\">{record.id}</th>\n                                        <td>{record.firstName}</td>\n                                        <td>{record.lastName}</td>\n                                        <td>{record.userName}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst TableCaption = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Captions</h4>\n                <p className=\"sub-header\">\n                    A <code>&lt;caption&gt;</code> functions like a heading for a table. It helps users with screen\n                    readers to find a table and understand what it’s about and decide if they want to read it.\n                </p>\n\n                <div className=\"table-responsive\">\n                    <Table className=\"mb-0\">\n                        <caption>List of users</caption>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">First</th>\n                                <th scope=\"col\">Last</th>\n                                <th scope=\"col\">Handle</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {(records.slice(0, 2) || []).map((record, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <th scope=\"row\">{record.id}</th>\n                                        <td>{record.firstName}</td>\n                                        <td>{record.lastName}</td>\n                                        <td>{record.userName}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ContextualClasses = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Contextual classes</h4>\n                <p className=\"sub-header\">Use contextual classes to color table rows or individual cells.</p>\n\n                <div className=\"table-responsive\">\n                    <Table className=\"mb-0\">\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Column heading</th>\n                                <th>Column heading</th>\n                                <th>Column heading</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr className=\"table-active\">\n                                <th scope=\"row\">1</th>\n                                <td>Column content</td>\n                                <td>Column content</td>\n                                <td>Column content</td>\n                            </tr>\n\n                            <tr className=\"table-success\">\n                                <th scope=\"row\">2</th>\n                                <td>Column content</td>\n                                <td>Column content</td>\n                                <td>Column content</td>\n                            </tr>\n\n                            <tr className=\"table-info\">\n                                <th scope=\"row\">3</th>\n                                <td>Column content</td>\n                                <td>Column content</td>\n                                <td>Column content</td>\n                            </tr>\n\n                            <tr className=\"table-warning\">\n                                <th scope=\"row\">4</th>\n                                <td>Column content</td>\n                                <td>Column content</td>\n                                <td>Column content</td>\n                            </tr>\n\n                            <tr className=\"table-danger\">\n                                <th scope=\"row\">5</th>\n                                <td>Column content</td>\n                                <td>Column content</td>\n                                <td>Column content</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst NestingTables = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Nesting tables</h4>\n                <p className=\"sub-header\"></p>\n\n                <div className=\"table-responsive\">\n                    <Table className=\"mb-0\" striped>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">First</th>\n                                <th scope=\"col\">Last</th>\n                                <th scope=\"col\">Handle</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <th>1</th>\n                                <td>Mark</td>\n                                <td>Otto</td>\n                                <td>@mdo</td>\n                            </tr>\n                            <tr>\n                                <td colSpan={4}>\n                                    <Table className=\"mb-0\">\n                                        <thead>\n                                            <tr>\n                                                <th>header</th>\n                                                <th>header</th>\n                                                <th>header</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr>\n                                                <th>A</th>\n                                                <td>first</td>\n                                                <td>last</td>\n                                            </tr>\n                                            <tr>\n                                                <th>B</th>\n                                                <td>first</td>\n                                                <td>last</td>\n                                            </tr>\n                                        </tbody>\n                                    </Table>\n                                </td>\n                            </tr>\n                            <tr>\n                                <th>3</th>\n                                <td>Larry</td>\n                                <td>the Bird</td>\n                                <td>@twitter</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ResponsiveTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Responsive tables</h4>\n                <p className=\"sub-header\">\n                    Create responsive tables by wrapping any <code>&lt;Table&gt;</code> in <code>responsive</code>{' '}\n                    attribute to make them scroll horizontally on small devices (under 768px).\n                </p>\n\n                <Table className=\"mb-0\" responsive>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Table heading</th>\n                            <th>Table heading</th>\n                            <th>Table heading</th>\n                            <th>Table heading</th>\n                            <th>Table heading</th>\n                            <th>Table heading</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <th scope=\"row\">1</th>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">2</th>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">3</th>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                            <td>Table cell</td>\n                        </tr>\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Tables = () => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Tables', path: '/ui/tables/basic' },\n                    { label: 'Basic Tables', path: '/ui/tables/basic', active: true },\n                ]}\n                title={'Basic Tables'}\n            />\n\n            <Row>\n                <Col lg={6}>\n                    <BasicTable />\n                </Col>\n\n                <Col lg={6}>\n                    <InverseTable />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <TableHeadOptions variant=\"light\" />\n                </Col>\n\n                <Col lg={6}>\n                    <TableHeadOptions variant=\"dark\" />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <BorderedTable />\n                </Col>\n\n                <Col lg={6}>\n                    <BorderedColorTable />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <BorderlessTable />\n                </Col>\n\n                <Col lg={6}>\n                    <SmallTable />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <HoverableTable />\n                </Col>\n\n                <Col lg={6}>\n                    <ActiveTable />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <StripedRowsTable />\n                </Col>\n\n                <Col lg={6}>\n                    <TableCaption />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <ContextualClasses />\n                </Col>\n\n                <Col lg={6}>\n                    <NestingTables />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={12}>\n                    <ResponsiveTable />\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default Tables;\n"],"sourceRoot":""}